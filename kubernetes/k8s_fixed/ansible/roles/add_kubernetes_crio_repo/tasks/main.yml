---

# VAGRANT SHELL PROVISION

- name: Update apt cache
  apt:
    update_cache: yes
  become: yes

- name: Configure /etc/hosts
  block:
    - name: Load IP configuration from settings.yaml
      set_fact:
        settings: "{{ lookup('file', 'settings.yaml') }}"
      become: yes

    - name: Extract IP sections
      set_fact:
        ip_sections: "{{ settings.network.control_ip | regex_search('^([0-9.]+\\.)([^.]+)$') }}"
      become: yes

    - name: Set IP_NW variable
      set_fact:
        IP_NW: "{{ ip_sections.captures[0] }}"
      become: yes

    - name: Set IP_START variable
      set_fact:
        IP_START: "{{ ip_sections.captures[1] | int }}"
      become: yes

    - name: Set NUM_WORKER_NODES variable
      set_fact:
        NUM_WORKER_NODES: "{{ settings.nodes.workers.count }}"
      become: yes

    - name: Add entries to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ IP_NW }}{{ item }}"
      with_sequence: start="{{ IP_START }}" end="{{ IP_START + NUM_WORKER_NODES }}"
      become: yes




# SCRIPTS PROVISION

- name: Ensure DNS Settings
  block:
    - name: Create systemd resolved configuration directory if not exists
      file:
        path: /etc/systemd/resolved.conf.d
        state: directory
      become: yes

    - name: Set DNS servers in resolved configuration
      copy:
        content: |
          [Resolve]
          DNS={{ DNS_SERVERS }}
        dest: /etc/systemd/resolved.conf.d/dns_servers.conf
      become: yes

    - name: Restart systemd-resolved service
      service:
        name: systemd-resolved
        state: restarted
      become: yes

- name: Disable Swap
  block:
    - name: Turn off swap
      command: swapoff -a
      become: yes

    - name: Persist swap off during reboot
      lineinfile:
        path: /etc/crontab
        line: "@reboot /sbin/swapoff -a"
      become: yes

- name: Update System and Install CRI-O Runtime
  block:
    - name: Update apt cache
      apt:
        update_cache: yes
      become: yes

    - name: Add modules to load at bootup
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/crio.conf
      become: yes

    - name: Load required kernel modules
      command: modprobe {{ item }}
      with_items:
        - overlay
        - br_netfilter
      become: yes

    - name: Set up required sysctl params
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
      become: yes

    - name: Apply sysctl settings
      command: sysctl --system
      become: yes

    - name: Add Kubernetes CRI-O repositories
      block:
        - name: Add stable libcontainers repository
          apt_repository:
            repo: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/ /"
            state: present
            filename: devel:kubic:libcontainers:stable.list

        - name: Add stable CRI-O repository
          apt_repository:
            repo: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ KUBERNETES_VERSION | regex_replace('([0-9]+)\\.([0-9]+)', '\\1.\\2') }}/{{ OS }}/ /"
            state: present
            filename: devel:kubic:libcontainers:stable:cri-o-{{ KUBERNETES_VERSION | regex_replace('([0-9]+)\\.([0-9]+)', '\\1.\\2') }}.list

        - name: Add GPG keys for the repositories
          command: "{{ item }}"
          with_items:
            - "curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o-{{ KUBERNETES_VERSION | regex_replace('([0-9]+)\\.([0-9]+)', '\\1.\\2') }}/{{ ansible_distribution_release }}/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -"
            - "curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ ansible_distribution_release }}/Release.key | apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -"

        - name: Update apt cache
          apt:
            update_cache: yes

    become: yes

- name: Install CRI-O and Kubernetes components
  block:
    - name: Install CRI-O
      apt:
        name: cri-o cri-o-runc
        state: present
      become: yes

    - name: Configure CRI-O
      lineinfile:
        path: /etc/default/crio
        line: "{{ ENVIRONMENT }}"
      become: yes

    - name: Reload daemon and enable CRI-O
      systemd:
        name: crio
        enabled: yes
        state: started
      become: yes

    - name: Install Kubernetes components
      block:
        - name: Add Kubernetes apt-key
          command: curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B53DC80D13EDEF05
          become: yes

        - name: Add Kubernetes repository
          apt_repository:
            repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
            state: present
            filename: kubernetes.list

        - name: Install kubelet, kubectl, kubeadm, and jq
          apt:
            name: "{{ item }}"
            state: present
          become: yes
          with_items:
            - "kubelet={{ KUBERNETES_VERSION }}"
            - "kubectl={{ KUBERNETES_VERSION }}"
            - "kubeadm={{ KUBERNETES_VERSION }}"
            - "jq"

        - name: Configure kubelet node IP
          command: "ip --json a s | jq -r '.[] | if .ifname == \"eth1\" then .addr_info[] | if .family == \"inet\" then .local else empty end else empty end'"
          register: local_ip
          changed_when: false

        - name: Set kubelet extra args
          blockinfile:
            path: /etc/default/kubelet
            block: |
              KUBELET_EXTRA_ARGS=--node-ip={{ local_ip.stdout }}
              {{ ENVIRONMENT }}
          become: yes

      become: yes

